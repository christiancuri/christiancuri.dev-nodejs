diff --git a/node_modules/mongoose-lean-getters/index.js b/node_modules/mongoose-lean-getters/index.js
index f32d83a..4cbd936 100644
--- a/node_modules/mongoose-lean-getters/index.js
+++ b/node_modules/mongoose-lean-getters/index.js
@@ -1,5 +1,6 @@
 'use strict';
 
+const mongoose = require('mongoose');
 const mpath = require('mpath');
 
 module.exports = function mongooseLeanGetters(schema) {
@@ -22,6 +23,8 @@ module.exports = function mongooseLeanGetters(schema) {
 
   schema.post('findOne', fn);
   schema.post('findOneAndUpdate', fn);
+  schema.post('create', fn);
+  schema.post('save', fn);
 };
 
 function applyGettersMiddleware(schema) {
@@ -35,30 +38,26 @@ function applyGetters(schema, res) {
     return;
   }
 
-  if (this._mongooseOptions.lean && this._mongooseOptions.lean.getters) {
-    if (Array.isArray(res)) {
-      const len = res.length;
-      for (let i = 0; i < len; ++i) {
-        applyGettersToDoc(schema, res[i]);
-      }
-    } else {
-      applyGettersToDoc(schema, res);
+  if (Array.isArray(res)) {
+    const len = res.length;
+    for (let i = 0; i < len; ++i) {
+      applyGettersToDoc(schema, res[i]);
     }
+  } else {
+    applyGettersToDoc(schema, res);
+  }
 
-    for (let i = 0; i < schema.childSchemas.length; ++i) {
-      const _path = schema.childSchemas[i].model.path;
-      const _schema = schema.childSchemas[i].schema;
-      const _doc = mpath.get(_path, res);
-      if (_doc == null) {
-        continue;
-      }
-      applyGetters.call(this, _schema, _doc);
+  for (let i = 0; i < schema.childSchemas.length; ++i) {
+    const _path = schema.childSchemas[i].model.path;
+    const _schema = schema.childSchemas[i].schema;
+    const _doc = mpath.get(_path, res);
+    if (_doc == null) {
+      continue;
     }
-
-    return res;
-  } else {
-    return res;
+    applyGetters.call(this, _schema, _doc);
   }
+
+  return res;
 }
 
 function applyGettersToDoc(schema, doc) {
@@ -73,6 +72,42 @@ function applyGettersToDoc(schema, doc) {
   }
 
   schema.eachPath((path, schematype) => {
-    mpath.set(path, schematype.applyGetters(mpath.get(path, doc), doc, true), doc);
+    let isArray = false
+
+    const value = mpath.get(path, doc, v => {
+      isArray = Array.isArray(v);
+      return v;
+    });
+
+    if (isArray && value && value.includes(',')) {
+      const values = value.split(',');
+
+      if (values[0] && mongoose.isObjectIdOrHexString(values[0])) {
+        return mpath.set(path, values.map(v => mongoose.isObjectIdOrHexString(v) ? String(v) : v), doc);
+      }
+    }
+
+    if (mongoose.isObjectIdOrHexString(value)) {
+      return mpath.set(path, String(value), doc);
+    }
+
+    if (value && Array.isArray(value[0]) && value[0] && mongoose.isObjectIdOrHexString(value[0])) {
+      return mpath.set(path, value.map(String), doc);
+    }
+
+    if (schematype.$isSchemaMap) {
+      if (!value) return;
+
+      mpath.set(path, schematype.applyGetters(mpath.get(path, doc), doc, true), doc);
+      const updatedValue = mpath.get(path, doc);
+
+      return mpath.set(path, new Map(Object.entries(updatedValue)), doc);
+    }
+
+    try {
+      mpath.set(path, schematype.applyGetters(mpath.get(path, doc), doc, true), doc);
+    } catch (error) {
+      //
+    }
   });
 }
